# This file is part of the RISC OS Toolkit (RTK).
# Copyright © 2003-2004 Graham Shaw.
# Distribution and use are subject to the GNU Lesser General Public License,
# a copy of which may be found in the file !RTK.Copyright.

-----------------------------------------------------------------------
The RISC OS Toolkit

Version 0.6.0 (10 May 2004)
-----------------------------------------------------------------------

Introduction

  The RISC OS Toolkit (RTK) is a class library for developing RISC OS
  application programs in C++. It differs from other such libraries
  currently available for RISC OS in its support for automatic layout.
  This is achieved by specifying the relationship between different
  visual components (for example, the fact that they are arranged in a
  grid or a column). The precise coordinates are calculated by the RTK.
  This eliminates the need for a template editor, and allows the layout
  to change at run-time to accommodate varying content.

  (Support will be provided for RISC OS template files, but that is not
  intended to be the normal method of use.)

  Other goals are:
    * to provide high-level support for common window types, icon types
      and protocols;
    * to provide an extensible, type-safe event delivery mechanism.
    * to implement style-guide compliant behaviour by default.

  Please be aware that the RTK is still under development.  Most of the
  basic infrastructure is complete, but there are many more classes that
  could be added.  Some functions are correct but not efficient.

Requirements

  Supported operating systems include:
    * RISC OS 4.02
    * RISC OS 5.03

  The RTK may work with earlier versions of RISC OS provided that the
  nested window manager is present.

  Supported compilers include:
    * GCC 2.95.4 (release 3)
    * GCC 2.95.4 (experimental 32-bit, 05 May 2003)

  The Acorn C/C++ compiler (up to version 3.19 at least) is not
  supported because there are important parts of the C++ language that
  it does not implement.

Installation

  The !RTK application directory can be located anywhere.

  Ensure that it has been booted and/or run before attempting to compile
  or link against it.

  (If two or more versions are present, running !RTK will change the
  active version whereas booting it will not.)

Use

  When compiling, append -Irtk: to the GCC command line. This adds
  rtk: to the list of paths that are searched for include files.

  When linking, append -lrtk:a.rtk to the GCC command line. This adds
  rtk:a.rtk to the list of libraries searched by the linker.

  Include directives should be of the form:

    #include "rtk/desktop/application.h"

  Be aware that all RTK classes are declared within namespaces. You must
  either specify the namespace expicitly:

    rtk::desktop::application

  or place a using directive at the start of each source file:

    using namespace rtk::desktop

  The main() function is normally of the form:

    int main(void)
    {
      myapp app;
      app.run();
      return 0;
    }

  where myapp is a class derived from rtk::desktop::application.

  Documentation available from the RTK web site currently includes:
    * the RTK reference manual
    * a number of example programs

Building from Source

  To build the RTK from souce code the following tools must be present
  on the Run$Path:
    * make
    * gcc
    * libfile
    * fixdeps

  Suitable versions of make, gcc and libfile may be found within
  supported distributions of GCC. fixdeps may be obtained from the RTK
  web site.

  No configuration is necessary. Change the current directory to !RTK
  then issue the command:

    make all

  Please note that some difficulties have been encountered when using
  recursive makefiles with the experimental 32-bit version of make. They
  can be overcome by executing the makefiles individually from an obey
  file.

Support

  The RTK home page may be found at:

  http://www.sagitta.demon.co.uk/rtk/

  There is also a mailing list. To subscribe, send an empty message to:

  mailto:rtk-request@sagitta.demon.co.uk

  with a subject of "subscribe".

Todo

   * a multi-line text field class
   * a template layout class
   * a discard/cancel/save dialogue box class
   * printing
